name: Docker Build Test

on:
  pull_request:
    branches:
      - main
      - master
  push:
    branches:
      - develop

jobs:
  build-panel:
    name: Build Panel Image
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🔨 Build Panel image
        uses: docker/build-push-action@v5
        with:
          context: ./panel
          file: ./panel/Dockerfile
          push: false
          tags: timeout-panel:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: ✅ Test Panel image
        run: |
          docker run --rm -d --name test-panel \
            -e NODE_ENV=production \
            -e PORT=3000 \
            timeout-panel:test
          sleep 10
          docker ps | grep test-panel
          docker stop test-panel

  build-bot:
    name: Build Bot Image
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🔨 Build Bot image
        uses: docker/build-push-action@v5
        with:
          context: ./bot
          file: ./bot/Dockerfile
          push: false
          tags: timeout-bot:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: ✅ Test Bot image
        run: |
          docker images | grep timeout-bot
          echo "Bot image built successfully"

  docker-compose-test:
    name: Test Docker Compose
    runs-on: ubuntu-latest
    needs: [build-panel, build-bot]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: 🔧 Create test .env
        run: |
          cat > .env << EOF
          DATABASE_URL=postgresql://test:test@localhost:5432/test
          SUPABASE_URL=https://test.supabase.co
          SUPABASE_ANON_KEY=test-key
          SUPABASE_SERVICE_ROLE_KEY=test-key
          TELEGRAM_BOT_TOKEN=123456:ABC-DEF
          TELEGRAM_BOT_USERNAME=@test_bot
          API_SECRET_KEY=test-secret
          SESSION_SECRET=test-session
          EOF
      
      - name: 🧪 Test docker-compose config
        run: |
          docker compose config
          echo "Docker Compose configuration is valid"

